import pandas as pd 
from unidecode import unidecode

class Exchanges:

    @property
    def Country(self):
        return [
    'Argentina',
    'Australia',
    'Australia',
    'Austria',
    'Bahrain',
    'Bangladesh',
    'Belgium',
    'Brazil',
    'Canada',
    'Canada',
    'Canada',
    'Canada',
    'Chile',
    'China',
    'China',
    'Colombia',
    'Croatia',
    'Cyprus',
    'Czech Republic',
    'Denmark',
    'Egypt',
    'Finland',
    'France',
    'Germany',
    'Germany',
    'Germany',
    'Germany',
    'Germany',
    'Germany',
    'Germany',
    'Germany',
    'Germany',
    'Germany',
    'Greece',
    'Hong Kong',
    'Hungary',
    'Iceland',
    'India',
    'India',
    'Indonesia',
    'Ireland',
    'Israel',
    'Italy',
    'Japan',
    'Jordan',
    'Kenya',
    'Kuwait',
    'Luxembourg',
    'Malaysia',
    'Mexico',
    'Morocco',
    'New Zealand',
    'Nigeria',
    'Norway',
    'Norway',
    'Oman',
    'Pakistan',
    'Peru',
    'Philippines',
    'Poland',
    'Portugal',
    'Qatar',
    'Romania',
    'Russia',
    'Saudi Arabia',
    'Senegal',
    'Singapore',
    'Slovenia',
    'South Africa',
    'South Korea',
    'South Korea',
    'Spain',
    'Sri Lanka',
    'Sweden',
    'Sweden',
    'Switzerland',
    'Switzerland',
    'Syria',
    'Taiwan',
    'Taiwan',
    'Thailand',
    'The Netherlands',
    'The Netherlands',
    'Turkey',
    'United Arab Emirates',
    'United Arab Emirates',
    'United Arab Emirates',
    'United Kingdom',
    'United Kingdom',
    'United Kingdom',
    'United Kingdom',
    'United Kingdom',
    'United Kingdom',
    'United Kingdom',
    'USA',
    'USA',
    'USA',
    'USA',
    'USA',
    'USA',
    'USA',
    'USA',
    'Vietnam',
    'Vietnam',
]

    @property
    def Exchange_name(self):
        return[
    'Bolsa de Comercio de Buenos Aires',
    'National Stock Exchange of Australia',
    'Asx - All Markets',
    'Wiener Boerse Ag',
    'Bahrain Bourse',
    'Dhaka Stock Exchange Ltd',
    'Nyse Euronext - Euronext Brussels',
    'XBSP',
    'Canadian Securities Exchange',
    'Toronto Stock Exchange',
    'TSX Venture Exchange',
    'NEO Exchange',
    'Santiago Stock Exchange',
    'Shanghai Stock Exchange',
    'Shenzhen Stock Exchange',
    'Bolsa De Valores De Colombia',
    'Zagreb Stock Exchange',
    'Cyprus Stock Exchange',
    'Prague Stock Exchange',
    'Omx Nordic Exchange Copenhagen A/S',
    'Egyptian Exchange',
    'Nasdaq Omx Helsinki Ltd.',
    'Euronext Paris',
    'Equiduct Trading',
    'Boerse Berlin',
    'Dusseldorf Stock Exchange',
    'Frankfurt Stock Exchange',
    'Hamburg Stock Exchange',
    'Hanover Stock Exchange',
    'Munich Stock Exchange',
    'Stuttgart Stock Exchange',
    'Deutsche Boerse Xetra',
    'QUOTRIX',
    'Athens Exchange S.A. Cash Market',
    'Hong Kong Exchange',
    'Budapest Stock Exchange',
    'First North Iceland',
    'BSE LTD',
    'National Stock Exchange Of India',
    'Indonesia Stock Exchange',
    'Irish Stock Exchange - All Market',
    'Tel Aviv Stock Exchange',
    'Borsa Italiana S.P.A.',
    'Tokyo Stock Exchange',
    'Amman Stock Exchange',
    'Nairobi Stock Exchange',
    'Kuwait Stock Exchange',
    'Luxembourg Stock Exchange',
    'Bursa Malaysia',
    'Bolsa Mexicana De Valores (Mexican Stock Exchange)',
    'Casablanca Stock Exchange',
    'New Zealand Exchange Ltd',
    'Nigerian Stock Exchange',
    'Oslo Bors Asa',
    'Norwegian OTC Market',
    'Muscat Securities Market',
    'Karachi Stock Exchange (Guarantee) Limited',
    'Bolsa De Valores De Lima',
    'Philippine Stock Exchange Inc.',
    'Warsaw Stock Exchange/Equities/Main Market',
    'Nyse Euronext - Euronext Lisbon',
    'Qatar Exchange',
    'Spot Regulated Market - Bvb',
    'Standard-Classica-Forts',
    'Saudi Stock Exchange',
    '',
    'Singapore Exchange',
    'Ljubljana Stock Exchange (Official Market)',
    'Johannesburg Stock Exchange',
    'Korea Exchange (Stock Market)',
    'Korea Exchange (Kosdaq)',
    'Bolsa De Madrid',
    'Colombo Stock Exchange',
    'Nordic Growth Market',
    'Nasdaq Omx Nordic',
    'Six Swiss Exchange',
    'Six Swiss - Blue Chips Segment',
    'Damascus Securities Exchange',
    'Tapei Exchange',
    'Taiwan Stock Exchange',
    'Stock Exchange Of Thailand',
    'TOM MTF',
    'Nyse Euronext - Euronext Amsterdam',
    'Istanbul Stock Exchange',
    'Dubai Financial Market',
    'Nasdaq Dubai',
    'Abu Dhabi Securities Exchange',
    'BATS Trading Europe',
    'Chi-X Eruope',
    'London Stock Exchange International',
    'London Stock Exchange',
    'ITG Posit',
    'Turquoise',
    'Cinnober BOAT',
    'NYSE American',
    'CBOE BATS BZX',
    'New York Stock Exchange',
    'NYSE Arca',
    'NASDAQ Global Market',
    'NASDAQ Capital Market',
    'OTC markets',
    'NASDAQ Global Select',
    'Hanoi Stock Exchange',
    'Hochiminh Stock Exchange',
]
    
    @property
    def EOD_code(self):
        return[
    'BA',
    '',
    'AU',
    'VI',
    '',
    '',
    'BR',
    'SA',
    'CN',
    'TO',
    'V',
    'NEO',
    'SN',
    'SHG',
    'SHE',
    '',
    '',
    '',
    '',
    'CO',
    '',
    'HE',
    'PA',
    '',
    'BE',
    'DU',
    'F',
    'HM',
    'HA',
    'MU',
    'STU',
    'XETRA',
    '',
    'AT',
    'HK',
    'BUD',
    '',
    'BSE',
    'NSE',
    'JK',
    'IR',
    'TA',
    'MI',
    'TSE',
    '',
    '',
    '',
    '',
    'KLSE',
    'MX',
    '',
    'NZ',
    '',
    'OL',
    '',
    '',
    'KAR',
    '',
    'PSE',
    'WAR',
    'LS',
    '',
    '',
    'MCX',
    'SR',
    '',
    'SG',
    '',
    'JSE',
    'KO',
    'KQ',
    'MC',
    '',
    '',
    'ST',
    'SW',
    'VX',
    '',
    'TWO',
    'TW',
    'BK',
    '',
    'AS',
    'IS',
    '',
    '',
    '',
    '',
    '',
    'IL',
    'LSE',
    '',
    '',
    '',
    'US',
    'US',
    'US',
    'US',
    'US',
    'US',
    'US',
    'US',
    '',
    'VN',
]

    @property
    def exchange_table(self):
        return pd.DataFrame({
                'Country': [x.lower() for x in self.Country],
                'Exchange_name': [x.lower() for x in self.Exchange_name],
                'EOD_code': [x.lower() for x in self.EOD_code],
            }, 
            columns = [
                'Country', 'Exchange_name', 'EOD_code',
                     ]
        )

    def ticker_needs_convertion(self, _input):
        ''' Checks if company is american, is so it doesnt need the exchange_code'''
        return _input not in ['US', 'NYSE American','CBOE BATS BZX','New York Stock Exchange','NYSE Arca','NASDAQ Global Market','NASDAQ Capital Market','OTC markets','NASDAQ Global Select','USA']
    
    def convert_to_propriate_ticker(self, ticker, _input):
        '''
        converts exchange name to exchange_ticker 
        '''
        _input = unidecode(_input) #converts foreign characters 
        if self.ticker_needs_convertion(_input):
            code = self.validate_exchange(_input.lower())
            return ticker+'.'+code
        return ticker
      
    def validate_exchange(self, _input):
        '''
        checks if exchange input from "Enterprice()" matches the chart 
        '''
        index = (self.exchange_table.T == _input).any().idxmax()
        return self.exchange_table['EOD_code'][index].upper()


